"""
–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os

from database import (
    get_all_users, get_user_count, get_active_debts_count,
    save_scheduled_message
)
from states import AdminBroadcast
from utils.broadcast import send_broadcast_to_all_users, send_scheduled_broadcast_with_stats
from utils.scheduler import scheduler

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


@router.message(Command('admin'))
async def admin_panel(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await state.clear()
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    user_count = await get_user_count()
    active_debts = await get_active_debts_count()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({user_count})", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    await message.answer(stats_text, reply_markup=kb)


@router.callback_query(F.data == "admin_users")
async def admin_users_list(call: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    users = await get_all_users()
    if not users:
        await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, user in enumerate(users[:10], 1):
        text += f"{i}. ID: {user['user_id']}\n"
        text += f"   –Ø–∑—ã–∫: {user.get('lang', 'ru')}\n"
        text += f"   –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {user.get('notify_time', '09:00')}\n"
        text += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {user.get('active_debts', 0)}\n"
        text += f"   –í—Å–µ–≥–æ –¥–æ–ª–≥–æ–≤: {user.get('total_debts', 0)}\n\n"

    if len(users) > 10:
        text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    await call.message.edit_text(text, reply_markup=kb)


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(AdminBroadcast.waiting_for_text)
    await call.message.edit_text(
        "üì¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    )


@router.message(AdminBroadcast.waiting_for_text)
async def admin_broadcast_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    await state.update_data(broadcast_text=message.text)
    await state.set_state(AdminBroadcast.waiting_for_photo)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data="send_without_photo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])

    await message.answer(
        f"üì¢ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
        reply_markup=kb
    )


@router.callback_query(F.data == "add_photo", AdminBroadcast.waiting_for_photo)
async def admin_broadcast_add_photo(call: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if call.message.photo:
        await call.message.edit_caption(caption="üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    else:
        await call.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


@router.message(AdminBroadcast.waiting_for_photo, F.photo)
async def admin_broadcast_photo(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    text = data['broadcast_text']

    await state.update_data(broadcast_photo=photo_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])

    await message.answer_photo(
        photo_id,
        caption=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ:\n\n{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )


@router.callback_query(F.data == "send_without_photo", AdminBroadcast.waiting_for_photo)
async def admin_broadcast_no_photo(call: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    text = data['broadcast_text']

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now_no_photo")],
        [InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])

    if call.message.photo:
        await call.message.edit_caption(
            caption=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ:\n\n{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb
        )
    else:
        await call.message.edit_text(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ:\n\n{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb
        )


@router.callback_query(F.data == "send_broadcast_now")
async def admin_broadcast_send_now(call: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–µ–π—á–∞—Å"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    text = data['broadcast_text']
    photo_id = data.get('broadcast_photo')
    admin_id = call.from_user.id

    if call.message.photo:
        await call.message.edit_caption(caption="üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
    else:
        await call.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")

    success, errors, blocked_users = await send_broadcast_to_all_users(text, photo_id, admin_id)

    result_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    if call.message.photo:
        await call.message.edit_caption(caption=result_text, reply_markup=kb)
    else:
        await call.message.edit_text(result_text, reply_markup=kb)

    await _send_detailed_stats(admin_id, success, errors, blocked_users)
    await state.clear()


@router.callback_query(F.data == "send_broadcast_now_no_photo")
async def admin_broadcast_send_now_no_photo(call: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ —Å–µ–π—á–∞—Å"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    text = data['broadcast_text']
    admin_id = call.from_user.id

    await call.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")

    success, errors, blocked_users = await send_broadcast_to_all_users(text, None, admin_id)

    result_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    await call.message.edit_text(result_text, reply_markup=kb)
    await _send_detailed_stats(admin_id, success, errors, blocked_users)
    await state.clear()


@router.callback_query(F.data == "schedule_broadcast")
async def admin_broadcast_schedule(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(AdminBroadcast.waiting_for_schedule_time)

    if call.message.photo:
        await call.message.edit_caption(
            caption="‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 14:30"
        )
    else:
        await call.message.edit_text(
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "YYYY-MM-DD HH:MM\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 14:30"
        )


@router.message(AdminBroadcast.waiting_for_schedule_time)
async def admin_broadcast_schedule_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    try:
        schedule_time = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        if schedule_time <= datetime.now():
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
        return

    data = await state.get_data()
    text = data['broadcast_text']
    photo_id = data.get('broadcast_photo')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_users()
    for user in users:
        await save_scheduled_message(user['user_id'], text, photo_id, schedule_time.strftime('%Y-%m-%d %H:%M'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job_id = f"broadcast_{datetime.now().timestamp()}"
    scheduler.add_job(
        send_scheduled_broadcast_with_stats,
        'date',
        run_date=schedule_time,
        id=job_id,
        args=[text, photo_id, message.from_user.id]
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    confirm_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}"
    await message.answer(confirm_text, reply_markup=kb)

    await _send_planning_stats(message.from_user.id, schedule_time, len(users), bool(photo_id))
    await state.clear()


@router.callback_query(F.data == "admin_stats")
async def admin_stats(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_count = await get_user_count()
    active_debts = await get_active_debts_count()

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}
üìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}
"""

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
    ])

    await call.message.edit_text(stats_text, reply_markup=kb)


@router.callback_query(F.data == "admin_back")
async def admin_back(call: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(call.from_user.id):
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.clear()
    user_count = await get_user_count()
    active_debts = await get_active_debts_count()

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {active_debts}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({user_count})", callback_data="admin_users")],
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

    if call.message.photo:
        await call.message.edit_caption(caption=stats_text, reply_markup=kb)
    else:
        await call.message.edit_text(stats_text, reply_markup=kb)


async def _send_detailed_stats(admin_id: int, success: int, errors: int, blocked_users: list):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏"""
    from bot import bot

    detailed_stats = f"""
üì¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}
‚ùå –û—à–∏–±–æ–∫: {errors}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {round((success / (success + errors)) * 100, 1) if (success + errors) > 0 else 0}%

üìù –î–µ—Ç–∞–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {success + errors}
‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {success}
‚Ä¢ –ù–µ –ø–æ–ª—É—á–∏–ª–∏ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏/—É–¥–∞–ª–∏–ª–∏ –±–æ—Ç–∞): {errors}

‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

    try:
        await bot.send_message(admin_id, detailed_stats)
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if blocked_users and len(blocked_users) <= 10:
        blocked_text = f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 10):\n"
        for user_id in blocked_users[:10]:
            blocked_text += f"‚Ä¢ {user_id}\n"
        try:
            await bot.send_message(admin_id, blocked_text)
        except Exception:
            pass
    elif blocked_users:
        try:
            await bot.send_message(admin_id, f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(blocked_users)} (—Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç)")
        except Exception:
            pass


async def _send_planning_stats(admin_id: int, schedule_time: datetime, user_count: int, has_photo: bool):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from bot import bot

    planning_stats = f"""
üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏

üìä –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {schedule_time.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {user_count}
‚Ä¢ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {'–° —Ñ–æ—Ç–æ' if has_photo else '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç'}

üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –í—Ä–µ–º—è –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É: Asia/Tashkent
"""

    try:
        await bot.send_message(admin_id, planning_stats)
    except Exception:
        pass