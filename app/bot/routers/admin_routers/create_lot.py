import asyncio
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List

from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram import F
from loguru import logger

from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.router import Router
from app.bot.keyboards.inlane_kb import lot_confirm, LotConfirmCallback, lot_kb, completed_auction_kb
from app.bot.keyboards.markup_kbs import MainKeyboard, del_kbd
from app.bot.utils.func import generate_lot_confirmation_text
from app.db.dao import LotDAO, UserDAO
from app.db.database import async_session_maker
from app.config import bot, settings
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.db.models import User
from app.db.schemas import LotCreateModel, LotFilterModel, TelegramIDModel

create_lot_router = Router()

media_groups: Dict[str, List[Message]] = defaultdict(list)
media_group_timers: Dict[str, asyncio.Task] = {}


class CreateLot(StatesGroup):
    lot_info = State()
    price = State()
    rate_step = State()
    time_in_minutes = State()
    main_photo = State()
    photos_link = State()
    autoteka_link = State()
    diagnostik_link = State()
    confirm = State()


async def process_media_group(media_group_id: str, state: FSMContext):
    await asyncio.sleep(1)

    messages = media_groups.get(media_group_id, [])
    if not messages:
        return

    photo_ids = []
    for msg in messages:
        if msg.photo:
            photo_ids.append(msg.photo[-1].file_id)

    if photo_ids:
        await state.update_data(
            main_photo=photo_ids[0],
            additional_photos=photo_ids[1:] if len(photo_ids) > 1 else []
        )

        first_message = messages[0]
        if len(photo_ids) == 1:
            await first_message.answer(
                "‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç):")
        else:
            await first_message.answer(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photo_ids)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!\n–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω—ã–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç):")

        await state.set_state(CreateLot.photos_link)

    media_groups.pop(media_group_id, None)
    media_group_timers.pop(media_group_id, None)


@create_lot_router.message(F.text == MainKeyboard.get_admin_kb_texts().get('create_lot'))
async def start_create_lot(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ:", reply_markup=del_kbd)
    await state.set_state(CreateLot.lot_info)


@create_lot_router.message(F.text, StateFilter(CreateLot.lot_info))
async def set_lot_info(message: Message, state: FSMContext):
    await state.update_data(lot_info=message.html_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ª–æ—Ç–∞:")
    await state.set_state(CreateLot.price)


@create_lot_router.message(F.text, StateFilter(CreateLot.price))
async def set_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∞–≥ —Å—Ç–∞–≤–∫–∏:")
        await state.set_state(CreateLot.rate_step)
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@create_lot_router.message(F.text, StateFilter(CreateLot.rate_step))
async def set_rate_step(message: Message, state: FSMContext):
    try:
        rate_step = float(message.text)
        if rate_step <= 0:
            await message.answer("‚ùå –®–∞–≥ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(rate_step=rate_step)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        await state.set_state(CreateLot.time_in_minutes)
    except ValueError:
        await message.answer("‚ùå –®–∞–≥ —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@create_lot_router.message(F.text, StateFilter(CreateLot.time_in_minutes))
async def set_time(message: Message, state: FSMContext):
    try:
        time_in_minutes = int(message.text)
        if time_in_minutes <= 0:
            await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if time_in_minutes > 1440:
            await message.answer("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        await state.update_data(time_in_minutes=time_in_minutes)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π) –≤ —á–∞—Ç:")
        await state.set_state(CreateLot.main_photo)
    except ValueError:
        await message.answer("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@create_lot_router.message(F.photo, StateFilter(CreateLot.main_photo))
async def set_main_photo(message: Message, state: FSMContext):
    if message.media_group_id:
        media_group_id = message.media_group_id
        media_groups[media_group_id].append(message)

        if media_group_id in media_group_timers:
            media_group_timers[media_group_id].cancel()

        media_group_timers[media_group_id] = asyncio.create_task(
            process_media_group(media_group_id, state)
        )
    else:
        await state.update_data(
            main_photo=message.photo[-1].file_id,
            additional_photos=[]
        )
        await message.answer(
            "‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç):")
        await state.set_state(CreateLot.photos_link)


@create_lot_router.message(F.text, StateFilter(CreateLot.photos_link))
async def set_photos_link(message: Message, state: FSMContext):
    photos_link = message.text.strip()
    if photos_link.lower() in ['–Ω–µ—Ç', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '-', 'no']:
        photos_link = ""
    await state.update_data(photos_link=photos_link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á–µ—Ç –ê–≤—Ç–æ—Ç–µ–∫–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ—Ç):")
    await state.set_state(CreateLot.autoteka_link)


@create_lot_router.message(F.text, StateFilter(CreateLot.autoteka_link))
async def set_autoteka_link(message: Message, state: FSMContext):
    autoteka_link = message.text.strip()
    if autoteka_link.lower() in ['–Ω–µ—Ç', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '-', 'no']:
        autoteka_link = ''
    await state.update_data(autoteka_link=autoteka_link, diagnostik_link="")

    data = await state.get_data()
    msg = await generate_lot_confirmation_text(data)

    await message.answer_photo(
        photo=data.get('main_photo'),
        caption=msg,
        reply_markup=lot_confirm(),
        parse_mode='html'
    )

    additional_photos = data.get('additional_photos', [])
    if additional_photos:
        await message.answer(f"üì∑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(additional_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")


@create_lot_router.callback_query(LotConfirmCallback.filter())
async def process_confirm_callback(query: CallbackQuery, callback_data: LotConfirmCallback, state: FSMContext):
    match callback_data.action:
        case 'yes':
            try:
                data = await state.get_data()

                try:
                    await bot.get_chat(settings.USER_GROUP_ID)
                    await bot.get_chat(settings.ADMIN_GROUP_ID)
                except Exception as e:
                    logger.error(f"–ì—Ä—É–ø–ø—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
                    await query.message.answer(
                        "‚ùå –û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. "
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
                    )
                    return

                async with async_session_maker() as session:
                    additional_photos = data.get('additional_photos', [])
                    additional_photos_str = ','.join(additional_photos) if additional_photos else ''

                    lot_data = LotCreateModel(
                        lot_info=data.get('lot_info'),
                        price=data.get('price'),
                        rate_step=data.get('rate_step'),
                        time_in_minutes=data.get('time_in_minutes'),
                        main_photo=data.get('main_photo'),
                        additional_photos=additional_photos_str,
                        photos_link=data.get('photos_link'),
                        autoteka_link=data.get('autoteka_link'),
                        diagnostik_link=data.get('diagnostik_link'),
                        is_active=True
                    )
                    await LotDAO.add(session=session, values=lot_data)

                async with async_session_maker() as session:
                    lot = await LotDAO.find_one_or_none(session, filters=LotFilterModel(
                        lot_info=data.get('lot_info'),
                        price=data.get('price'),
                        rate_step=data.get('rate_step'),
                        time_in_minutes=data.get('time_in_minutes'),
                        main_photo=data.get('main_photo'),
                        photos_link=data.get('photos_link'),
                        autoteka_link=data.get('autoteka_link'),
                        diagnostik_link=data.get('diagnostik_link')
                    ))
                    lot_id = lot.id

                me = await bot.get_me()
                data.update({
                    'lot_id': lot_id,
                    'bot_username': me.username,
                    'min_rate': lot.price,
                    'current_rate': None
                })

                try:
                    main_photo = data.get('main_photo')
                    additional_photos = data.get('additional_photos', [])
                    all_photos = [main_photo] + additional_photos

                    if len(all_photos) == 1:
                        photo_message = await bot.send_photo(
                            chat_id=settings.USER_GROUP_ID,
                            photo=main_photo,
                            caption=f'üöó **–õ–æ—Ç ‚Ññ{lot_id}**',
                            parse_mode='markdown'
                        )
                    else:
                        from aiogram.types import InputMediaPhoto
                        media_group = []

                        media_group.append(InputMediaPhoto(
                            media=all_photos[0],
                            caption=f'üöó **–õ–æ—Ç ‚Ññ{lot_id}**',
                            parse_mode='markdown'
                        ))

                        for photo_id in all_photos[1:9]:
                            media_group.append(InputMediaPhoto(media=photo_id))

                        media_messages = await bot.send_media_group(
                            chat_id=settings.USER_GROUP_ID,
                            media=media_group
                        )
                        photo_message = media_messages[0]

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    if "message is too long" in str(e):
                        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
                    elif "photo not found" in str(e):
                        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    else:
                        await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                    return

                try:
                    description_message = await bot.send_message(
                        chat_id=settings.USER_GROUP_ID,
                        text=f'**–õ–æ—Ç ‚Ññ{lot_id}**\n\n{data.get("lot_info")}',
                        reply_markup=lot_kb(data),
                        parse_mode='markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
                    try:
                        await bot.delete_message(settings.USER_GROUP_ID, photo_message.message_id)
                    except:
                        pass

                    if "message is too long" in str(e):
                        await query.message.answer("‚ùå –û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
                    else:
                        await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ—Ç–∞: {e}")
                    return

                asyncio.create_task(
                    process_auction(description_message, data, photo_message.message_id)
                )

                await query.message.delete()
                await query.message.answer(
                    f"‚úÖ –õ–æ—Ç ‚Ññ{lot_id} —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
                    reply_markup=MainKeyboard.build_main_kb(User.Role.admin)
                )

            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
                await query.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ç–∞. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
                )
            finally:
                await state.clear()

        case 'no':
            await query.message.answer(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=MainKeyboard.build_main_kb(User.Role.admin)
            )
            await state.clear()


import asyncio
from datetime import datetime

auction_update_events = {}


async def process_auction(message: Message, data: dict, photo_message_id: int):
    remaining_time = data.get('time_in_minutes')
    last_bid_time = None
    five_minutes_warning_sent = False
    lot_id = data.get('lot_id')

    update_event = asyncio.Event()
    auction_update_events[lot_id] = update_event

    logger.info(f"–ó–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –ª–æ—Ç–∞ {lot_id}, –≤—Ä–µ–º—è: {remaining_time} –º–∏–Ω—É—Ç")

    try:
        while True:
            try:
                logger.debug(f"–õ–æ—Ç {lot_id}: –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ {remaining_time} –º–∏–Ω—É—Ç")

                async with async_session_maker() as session:
                    lot = await LotDAO.find_one_or_none_by_id(data.get('lot_id'), session)
                    if not lot:
                        logger.error(f"–õ–æ—Ç {data.get('lot_id')} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω")
                        break

                    data.update({'current_rate': lot.curren_rate})
                    logger.debug(f"–õ–æ—Ç {lot_id}: –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ {lot.curren_rate}")

                bid_updated = False
                if lot.curren_rate and lot.curren_rate != data.get('last_known_rate'):
                    data.update({'last_known_rate': lot.curren_rate})
                    last_bid_time = datetime.now()
                    bid_updated = True
                    logger.info(f"–õ–æ—Ç {lot_id}: –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ {lot.curren_rate}, –≤—Ä–µ–º—è —Å—Ç–∞–≤–∫–∏: {last_bid_time}")

                    if remaining_time < 30:
                        old_time = remaining_time
                        remaining_time = 30
                        logger.info(f"–õ–æ—Ç {lot_id}: –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å {old_time} –¥–æ {remaining_time} –º–∏–Ω—É—Ç")
                        try:
                            await bot.send_message(
                                chat_id=settings.USER_GROUP_ID,
                                text=f"‚è∞ **–í–ù–ò–ú–ê–ù–ò–ï!** –ê—É–∫—Ü–∏–æ–Ω –ø–æ –ª–æ—Ç—É ‚Ññ{lot_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏!",
                                parse_mode='markdown'
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}")

                remaining_time = remaining_time - 1
                logger.debug(f"–õ–æ—Ç {lot_id}: –ü–æ—Å–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time} –º–∏–Ω—É—Ç")

                if remaining_time == 5 and not five_minutes_warning_sent:
                    logger.info(f"–õ–æ—Ç {lot_id}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç")
                    try:
                        await bot.send_message(
                            chat_id=settings.USER_GROUP_ID,
                            text=f'‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ –ª–æ—Ç—É ‚Ññ{lot_id} –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!**',
                            parse_mode='markdown'
                        )
                        five_minutes_warning_sent = True
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")

                if remaining_time <= 0:
                    logger.info(f"–õ–æ—Ç {lot_id}: –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω")
                    try:
                        if lot.current_rate_user_id:
                            logger.info(f"–õ–æ—Ç {lot_id}: –ï—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å {lot.current_rate_user_id}")
                            async with async_session_maker() as session:
                                user_who_won = await UserDAO.find_one_or_none(
                                    session,
                                    filters=TelegramIDModel(telegram_id=lot.current_rate_user_id)
                                )

                                if user_who_won:
                                    user_link = f"@{user_who_won.username}" if user_who_won.username else f"<a href='https://t.me/{user_who_won.telegram_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"

                                    await bot.send_message(
                                        chat_id=settings.ADMIN_GROUP_ID,
                                        text=(
                                            f"üèÜ **–ê–£–ö–¶–ò–û–ù ‚Ññ{lot.id} –ó–ê–í–ï–†–®–ï–ù**\n\n"
                                            f"üë§ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {user_who_won.user_enter_fio}\n"
                                            f"üöó –õ–æ—Ç: ‚Ññ{lot.id}\n"
                                            f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {lot.curren_rate} ‚ÇΩ\n"
                                            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_who_won.phone_number}\n"
                                            f"üì± Telegram: {user_link}"
                                        ),
                                        parse_mode='html'
                                    )

                                    await bot.send_message(
                                        chat_id=settings.USER_GROUP_ID,
                                        text=(
                                            f"üèÅ **–ê–£–ö–¶–ò–û–ù ‚Ññ{lot.id} –ó–ê–í–ï–†–®–ï–ù!**\n\n"
                                            f"üéâ –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n"
                                            f"üí∞ –°—Ç–∞–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: **{lot.curren_rate} ‚ÇΩ**"
                                        ),
                                        parse_mode='markdown'
                                    )
                                else:
                                    logger.warning(f"–õ–æ—Ç {lot_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        else:
                            logger.info(f"–õ–æ—Ç {lot_id}: –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Å—Ç–∞–≤–æ–∫")
                            await bot.send_message(
                                chat_id=settings.USER_GROUP_ID,
                                text=(
                                    f"üèÅ **–ê–£–ö–¶–ò–û–ù ‚Ññ{lot.id} –ó–ê–í–ï–†–®–ï–ù!**\n\n"
                                    f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.\n"
                                    f"üôè –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!"
                                ),
                                parse_mode='markdown'
                            )

                        async with async_session_maker() as session:
                            await LotDAO.update(
                                session,
                                filters=LotFilterModel(id=lot.id),
                                values={'is_active': False}
                            )
                        logger.info(f"–õ–æ—Ç {lot_id}: –õ–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ë–î")

                        try:
                            await message.edit_reply_markup(reply_markup=completed_auction_kb(data))
                            await message.edit_text(
                                text=message.text + '\n\nüèÅ **–ê–£–ö–¶–ò–û–ù –ó–ê–í–ï–†–®–ï–ù**',
                                parse_mode='markdown',
                                reply_markup=completed_auction_kb(data)
                            )
                            logger.info(f"–õ–æ—Ç {lot_id}: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ {lot_id}: {e}")

                    logger.info(f"–õ–æ—Ç {lot_id}: –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞")
                    break

                data.update({'time_in_minutes': remaining_time})
                if lot.curren_rate is not None:
                    min_rate = lot.curren_rate + lot.rate_step
                else:
                    min_rate = lot.price
                data.update({'min_rate': min_rate})

                try:
                    await message.edit_reply_markup(reply_markup=lot_kb(data))
                    logger.debug(f"–õ–æ—Ç {lot_id}: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–æ—Ç–∞ {lot_id}: {e}")

                try:
                    await asyncio.wait_for(update_event.wait(), timeout=60.0)
                    update_event.clear()
                    logger.info(f"–õ–æ—Ç {lot_id}: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    remaining_time += 1
                except asyncio.TimeoutError:
                    pass

            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞—É–∫—Ü–∏–æ–Ω–∞ {lot_id}: {e}")
                remaining_time -= 1
                if remaining_time <= 0:
                    logger.error(f"–õ–æ—Ç {lot_id}: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
                    break
                await asyncio.sleep(60)

    finally:
        auction_update_events.pop(lot_id, None)


def trigger_auction_update(lot_id: int):
    if lot_id in auction_update_events:
        auction_update_events[lot_id].set()
        logger.info(f"–õ–æ—Ç {lot_id}: –ó–∞–ø—É—â–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")


async def handle_bid(callback_query, lot_id: int, bid_amount: float):
    try:
        async with async_session_maker() as session:
            pass

        trigger_auction_update(lot_id)

        await callback_query.answer("–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏")